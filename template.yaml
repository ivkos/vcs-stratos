AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  vcs-stratus
  SAM template for deploying Stratus chatbot service in AWS.
  This template creates the following resources:
  - API gateway to forward request to the lambda function
  - Lambda function to handle requests to the chatbot
  - Lambda function to handle message events

# More info about Globals:
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3


Parameters:
  BrokerURI:
    Type: String
  BrokerKey:
    Type: String
    Description: ID of Here app.
  BrokerSecret:
    NoEcho: true
    Type: String
    Description: Secret code of Here app.
  DialogflowProjectId:
    Type: String
    Description: Dialogflow Project ID
  GoogleApplicationCredentialsFilename:
    Type: String
    Description: File name of the JSON file that contains your service account key
  BotUserToken:
    NoEcho: true
    Type: String
    Description: Bot User OAuth Access Token
  SlackSigningSecret:
    NoEcho: true
    Type: String
    Description: Slack Signing Secret


Resources:

  # API definition in API Gateway
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: 2.0
        info:
          title: StratusApi
        basePath: /Prod
        schemes:
        - https
        paths:
          /:
            x-amazon-apigateway-any-method:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${!stageVariables.FunctionName}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
              - application/json
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${!stageVariables.FunctionName}/invocations"
                httpMethod: POST
                type: aws_proxy
        x-amazon-apigateway-binary-media-types:
          - '*/*'
        definitions:
          Empty:
            type: object
            title: Empty Schema

      Variables:
        FunctionName: !Ref BotFunction


  BotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambda.handler
      Runtime: nodejs8.10
      Timeout: 3
      MemorySize: 512
      Environment:
        Variables:
          EVENT_QUEUE: !Ref EventQueue
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
      Policies:
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt EventQueue.QueueName
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: any
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: any


  EventFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: event.handler
      Runtime: nodejs8.10
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          BROKER_URI: !Ref BrokerURI
          BROKER_KEY: !Ref BrokerKey
          BROKER_SECRET: !Ref BrokerSecret
          DIALOGFLOW_PROJECT_ID: !Ref DialogflowProjectId
          GOOGLE_APPLICATION_CREDENTIALS_FILENAME: !Ref GoogleApplicationCredentialsFilename
          BOT_USER_TOKEN: !Ref BotUserToken
      Events:
        MessageEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EventQueue.Arn
            BatchSize: 10


  EventQueue:
    Type: 'AWS::SQS::Queue'
    Properties: {}


Outputs:

  ApiUrl:
    Description: Invoke URL for your API.
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ApiGatewayApi}/stages/Prod"

  BotFunctionArn:
    Description: "Bot Function ARN"
    Value: !GetAtt BotFunction.Arn

  EventFunctionArn:
    Description: "Event Function ARN"
    Value: !GetAtt EventFunction.Arn

